public class InterviewTree {

    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }
        if(root.left == null && root.right == null) {
            //叶子节点深度就是1
            return 1;
        }
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        return 1 + (leftDepth > rightDepth ? leftDepth :rightDepth);
    }


    public boolean isBalanced(TreeNode root) {
      if(root == null) {
          //空树认为是平衡的
          return true;
      }
      if(root.left == null && root.right == null) {
          //没有子树也认为是平衡的
          return true;
      }
      //看当前节点所对应的子树是否是平衡的
      int leftDepth = maxDepth(root.left);
      int rightDepth = maxDepth(root.right);
      if(leftDepth - rightDepth > 1 || leftDepth - rightDepth < -1) {
          //不是平衡的树
          return false;
      }
      return isBalanced(root.left) &&isBalanced(root.right);
    }
    
    //创建一棵树验证结果
    public static TreeNode build() {
        TreeNode A = new TreeNode(1);
        TreeNode B = new TreeNode(2);
        TreeNode C = new TreeNode(3);
        TreeNode D = new TreeNode(4);
        TreeNode E = new TreeNode(5);
        TreeNode F = new TreeNode(6);
        TreeNode G = new TreeNode(7);
        TreeNode H = new TreeNode(8);
        TreeNode I = new TreeNode(9);
        TreeNode J = new TreeNode(10);
        TreeNode K = new TreeNode(11);
        TreeNode L = new TreeNode(12);
        TreeNode Z = new TreeNode(26);

        A.left = B;
        A.right = C;
        B.left = D;
        B.right = E;
        D.left = F;
        D.right = G;
        F.left = Z;
        E.left = H;
        E.right = I;
        C.left = K;
        C.right = L;
        K.left = J;
        return A;
    }

    public static void main(String[] args) {
        TreeNode root = build();
        InterviewTree interviewTree = new InterviewTree();
        boolean ret = interviewTree.isBalanced(root);
        System.out.println(ret);
    }
    
}
