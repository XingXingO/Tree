//利用队列实现
public class InterviewTree {
    public void levelOrder(TreeNode root){
        //1、创建一个空队列并把根节点加入队列
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        //2、判断是否为空，循环取出队首元素，访问该元素并打印
        while(!queue.isEmpty()) {
            //取出队首元素，出队列
            TreeNode cur = queue.poll();
            //访问该元素
            System.out.print(cur.val+" ");
            //3、判断当前元素左子树，如果非空就入队列；右子树非空也入队列
            //左右子树入队列
            if(cur.left != null) {
                queue.offer(cur.left);
            }
            if(cur.right != null) {
                queue.offer(cur.right);
            }
        }
    }

//创建一棵树验证结果
    public static TreeNode build() {
        TreeNode A = new TreeNode(1);
        TreeNode B = new TreeNode(2);
        TreeNode C = new TreeNode(3);
        TreeNode D = new TreeNode(4);
        TreeNode E = new TreeNode(5);
        TreeNode F = new TreeNode(6);
        TreeNode G = new TreeNode(7);
        TreeNode H = new TreeNode(8);
        TreeNode I = new TreeNode(9);
        TreeNode J = new TreeNode(10);
        TreeNode K = new TreeNode(11);
        TreeNode L = new TreeNode(12);
        TreeNode Z = new TreeNode(26);

        A.left = B;
        A.right = C;
        B.left = D;
        B.right = E;
        D.left = F;
        D.right = G;
        F.left = Z;
        E.left = H;
        E.right = I;
        C.left = K;
        C.right = L;
        K.left = J;
        return A;
    }

    public static void main(String[] args) {
        TreeNode root = build();
        InterviewTree interviewTree = new InterviewTree();
        interviewTree.levelOrder(root);
        System.out.println();
    }

}
