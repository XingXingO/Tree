二叉搜索树转换成排序双向链表    
//二叉搜索树：左子树的所有节点 < 根节点； 根节点 < 右子树的所有节点
/*解：用TreeNode中的right指向下一个节点，用left指向上一个节点   如中序是 1 3 4 5 7 10 12 15 18的树
1.left指向null
1.right指向3
3.left指向1
3.right指向4
...
18.right指向null
 */
public class InterviewTree {
    public TreeNode Convert (TreeNode pRootOfTree) {
        //基于递归的方式完成双向链表的构建，保证有序性，需要中序遍历
        //二叉搜索树的中序遍历结果是有序的
        if(pRootOfTree ==  null) {
            return null;
        }
        if(pRootOfTree.left == null && pRootOfTree.right == null) {
            //当前节点没有子树
            return pRootOfTree;
        }
        //最终的链表 => 左子树的链表 + 根节点 + 右子树的链表
        //需要左子树链表的尾巴和根节点相连； 右子树链表的头部和根节点相连

        //1、先去递归处理左子树
        //left就是左子树这个链表的根节点
        TreeNode left = Convert(pRootOfTree.left);
        //2、需要找到左子树链表的尾结点
        TreeNode leftTail = left;
        //right相当于链表的next
        while (leftTail != null && leftTail.right != null) {
            leftTail = leftTail.right;
        }
        //循环结束后，leftTail指向了左侧链表的尾部
        //3、把左子树和当前节点连接在一起
        if(left != null) {
            leftTail.right = pRootOfTree;
            pRootOfTree.left = leftTail;
        }
        //4、递归转换右子树，把右子树也变成双向链表
        TreeNode right = Convert(pRootOfTree.right);
        //5、把当前节点和右子树连在一起
        if(right != null) {
            right.left = pRootOfTree;
            pRootOfTree.right = right;
        }
        //6、最终返回  新的链表的头结点
        //如果left为null,链表的头结点就是 pRootofTree
        //如果left非null,头结点就是 left
        return left == null ? pRootOfTree : left;
    }
}


7节55-1.10
